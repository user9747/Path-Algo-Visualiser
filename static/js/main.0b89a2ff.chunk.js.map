{"version":3,"sources":["Queue.js","Bfs.js","App.js","serviceWorker.js","index.js"],"names":["Queue","this","items","element","push","isEmpty","shift","length","str","i","findNeighbours","current","grid","visited","neigh","x","y","Box","props","val","className","boxColor","style","transitionDuration","dur","transitionDelay","onMouseDown","onClick","onMouseEnter","onDrag","React","Component","App","handleDrag","state","mousedown","mode","temp","map","arr","slice","setState","handleClick","prev_startpoint","prev_endpoint","handleMouse","b","changeMode","runBfs","start","queue","Array","fill","parentOf","path","traversed_path","enqueue","dequeue","console","log","Object","assign","JSON","stringify","pop","filter","point","neighbours","bfs","transition","time","setTimeout","drawPath","boxes","row","n","isActive","onDragStart","e","preventDefault","onMouseUp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b89a2ff.chunk.js","sourcesContent":["class Queue {\n    constructor() {\n        this.items = [];\n    }\n\n    enqueue(element) {\n        this.items.push(element);\n    }\n\n    dequeue() {\n        if (this.isEmpty())\n            return \"Underflow\";\n        return this.items.shift();\n    }\n\n    front() {\n        if (this.isEmpty())\n            return \"No elements in Queue\";\n        return this.items[0];\n    }\n\n    isEmpty() {\n        return this.items.length === 0;\n    }\n\n    printQueue() {\n        var str = \"\";\n        for (var i = 0; i < this.items.length; i++)\n            str += this.items[i] + \" \";\n        return str;\n    }\n}\n\nexport default Queue;","import Queue from './Queue'\n\nconst findNeighbours = (current, grid, visited) => {\n    var neigh = [];\n    var x = current.x\n    var y = current.y\n    if (x + 1 < 10 && grid[x + 1][y] !== 1 && visited[x + 1][y] !== 1) {\n        neigh.push({ x: x + 1, y: y })\n        // console.log(visited[x + 1][y])\n    }\n\n    if (y + 1 < 10 && grid[x][y + 1] !== 1 && visited[x][y + 1] !== 1) {\n        neigh.push({ x: x, y: y + 1 })\n        // console.log(visited[x][y + 1])\n    }\n\n    if (x - 1 >= 0 && grid[x - 1][y] !== 1 && visited[x - 1][y] !== 1) {\n        neigh.push({ x: x - 1, y: y })\n        // console.log(visited[x - 1][y])\n    }\n\n    if (y - 1 >= 0 && grid[x][y - 1] !== 1 && visited[x][y - 1] !== 1) {\n        neigh.push({ x: x, y: y - 1 })\n        // console.log(visited[x][y - 1])\n    }\n\n    return neigh;\n}\nexport const bfs = (grid, start) => {\n    var queue = new Queue()\n    var visited = Array(10).fill().map(() => Array(10).fill(0))\n    var parentOf = {}\n    var path = []\n    var traversed_path = []\n    queue.enqueue(start)\n    while (!queue.isEmpty()) {\n        var current = queue.dequeue()\n\n        if (grid[current.x][current.y] === 3) {\n            console.log(\"Found\")\n            let temp = Object.assign({}, current)\n\n            while (grid[temp.x][temp.y] !== 2) {\n                // console.log(temp);\n                temp = parentOf[JSON.stringify(temp)]\n                path.push(temp)\n            }\n            path.pop()\n            traversed_path = traversed_path.filter((point) => {\n                return (point.x !== current['x'] || point.y !== current['y'])\n            })\n            break;\n        }\n\n        visited[current.x][current.y] = 1\n        // var visited = visited.map(function (arr) {\n            // return arr.slice();\n        //   });\n        // console.log(visited)\n        var neighbours = findNeighbours(current, grid, visited)\n        // console.log(current.x+\" \"+current.y)\n        // console.log(neighbours)\n        \n        traversed_path.push(...neighbours)\n        for (var i = 0; i < neighbours.length; i++) {\n            parentOf[JSON.stringify(neighbours[i])] = Object.assign({}, current)\n            queue.enqueue(neighbours[i])\n            visited[neighbours[i].x][neighbours[i].y] = 1\n        }\n    }\n    // traversed_path.pop()\n    return [path, traversed_path]\n    // console.log(\"Not found\")\n}\n","import React from 'react';\nimport { bfs } from './Bfs'\nimport './App.css';\n\nclass Box extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  boxColor(val) {\n    switch (val) {\n      case 1: return \"wall-box\"\n      case 2: return \"start-box\"\n      case 3: return \"end-box\"\n      case 4: return \"traversed-box\"\n      case 5: return \"path-box\"\n      default: return \"box\"\n    }\n  }\n\n  render() {\n    return (<div className={this.boxColor(this.props.val)} style={{ transitionDuration: this.props.dur  + \"s\",transitionDelay: this.props.dur + \"s\" }} onMouseDown={this.props.onClick} onMouseEnter={this.props.onDrag} ></div>)\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.prev_startpoint = null;\n    this.prev_endpoint = null;\n    this.transition = Array(10).fill().map(() => Array(10).fill(0.3));\n    this.state = {\n      mode: 'walls',\n      grid: Array(10).fill().map(() => Array(10).fill(0)),\n      mousedown: false,\n    }\n  }\n\n  handleDrag = (x, y) => {\n    if (this.state.mousedown && this.state.mode === \"walls\") {\n      var temp = this.state.grid.map(function (arr) {\n        return arr.slice();\n      });\n      temp[x][y] = temp[x][y] === 0 ? 1 : 0\n      this.setState((state) => ({\n        grid: temp\n      }))\n    }\n  }\n  handleClick = (x, y) => {\n    var val = 1;\n    var temp = this.state.grid.map(function (arr) {\n      return arr.slice();\n    });\n    if (this.state.mode === \"start\") {\n      val = 2;\n      if (this.prev_startpoint != null) {\n        temp[this.prev_startpoint.x][this.prev_startpoint.y] = 0;\n      }\n      this.prev_startpoint = { x: x, y: y }\n    }\n    if (this.state.mode === \"end\") {\n      val = 3;\n      if (this.prev_endpoint != null) {\n        temp[this.prev_endpoint.x][this.prev_endpoint.y] = 0;\n      }\n      this.prev_endpoint = { x: x, y: y }\n    }\n    temp[x][y] = temp[x][y] === 0 ? val : 0\n    this.setState((state) => ({\n      grid: temp\n    }))\n  }\n  handleMouse = (b) => {\n    this.setState({ mousedown: b })\n  }\n  changeMode = (mode) => {\n    this.setState({ mode: mode })\n  }\n  isActive(mode) {\n    if (mode === this.state.mode) {\n      return \"active\";\n    }\n    return \"\";\n  }\n\n  runBfs = () => {\n    var [path, traversed_path] = bfs(this.state.grid, this.prev_startpoint)\n    // var temp = this.state.grid.slice()\n    // var temp = this.state.grid.map(function (arr) {\n    //   return arr.slice();\n    // });\n\n    this.setState((state) => {\n      var temp = state.grid;\n      for (var i = 0; i < traversed_path.length; i++) {\n        this.transition[traversed_path[i].x][traversed_path[i].y] = i * .1;\n        temp[traversed_path[i].x][traversed_path[i].y] = 4;\n      }\n      return ({\n        grid: temp\n      })\n    })\n    var l = traversed_path.length\n    var time = l*1000*.1\n    console.log(time)\n    setTimeout(() => {\n      this.drawPath(path)\n    }, time);\n  }\n\n  drawPath = (path) => {\n    this.setState((state) => {\n      var temp = state.grid;\n      for (var i = 0; i < path.length; i++) {\n        this.transition[path[i].x][path[i].y] = i * .1;\n        temp[path[i].x][path[i].y] = 5\n      }\n      return ({\n        grid: temp\n      })\n    })\n  }\n\n  render() {\n    const boxes = this.state.grid.map((row, x) => {\n      return (\n        <div className=\"row\">\n          {\n            row.map((n, y) => {\n              return (\n                <Box val={n} dur={this.transition[x][y]} onClick={() => { this.handleClick(x, y) }} onDrag={() => { this.handleDrag(x, y) }} ></Box>\n              )\n            })\n          }\n        </div>\n      )\n    })\n\n    return (\n      <div className=\"App\">\n\n        <div>\n          <button className={this.isActive('start')} onClick={() => { this.changeMode('start') }} >Start</button>\n          <button className={this.isActive('end')} onClick={() => { this.changeMode('end') }} >End</button>\n          <button className={this.isActive('walls')} onClick={() => { this.changeMode('walls') }} >Walls</button>\n          <button onClick={() => { this.runBfs() }}>Find Path</button>\n        </div>\n        <div onDragStart={(e) => { e.preventDefault(); return (false) }} onMouseDown={() => { this.handleMouse(true) }} onMouseUp={() => { this.handleMouse(false) }}>\n          {\n            boxes\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}